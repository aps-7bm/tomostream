#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import argparse

from datetime import datetime
from tomostream import log
from tomostream import config
    
def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))

def run_status(args):
    config.show_config(args)

def run_server(args):
    from tomostream import pv_server
    pv_server.Server(args).run()
    
def run_recon(args):
    from tomostream import recon
    recon.Recon(args).run()


def main():
    home = os.path.expanduser("~")
    logs_home = home + '/logs/'

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = logs_home + 'tomostream_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H:%M:%S") + '.log'
    log.setup_custom_logger(lfname)

    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    tomostream_params = config.TOMOSTREAM_PARAMS

    cmd_parsers = [
        ('init',          init,           (),                             "Create configuration file"),
        ('status',        run_status,     tomostream_params,              "Show tomostream status"),
        ('recon',         run_recon,      tomostream_params,              "Start the streaming reconstruction. Run this on the computer that runs the reconstruction"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)
  
    try:
        # load args from default (config.py) if not changed
        args._func(args)
        sections = config.TOMOSTREAM_PARAMS
        config.write(args.config, args=args, sections=sections)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)

if __name__ == "__main__":
    main()
